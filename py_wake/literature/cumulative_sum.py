import numpy as np
from py_wake.turbulence_models.crespo import CrespoHernandez
from py_wake.superposition_models import CumulativeWakeSum
from py_wake.deficit_models.gaussian import NiayifarGaussianDeficit
from py_wake.rotor_avg_models import GQGridRotorAvg
from py_wake.deficit_models.utils import mom1d_a0
from py_wake.wind_farm_models.engineering_models import PropagateDownwind
from py_wake.wind_turbines.power_ct_functions import PowerCtTabular
from py_wake.wind_turbines import WindTurbine

class CumulativeWake(PropagateDownwind):
    """
    Wind farm model used in:
    Majid Bastankhah, Bridget L. Welch, Luis A. Mart√≠nez-Tossas, Jennifer King and Paul Fleming
    Analytical solution for the cumulative wake of wind turbines in wind farms
    J. Fluid Mech. (2021), vol. 911, A53, doi:10.1017/jfm.2020.1037
    """
    def __init__(self, site, windTurbines):

        PropagateDownwind.__init__(self, site, windTurbines,
                                   wake_deficitModel=NiayifarGaussianDeficit(a0=mom1d_a0, a=[0.31, 0.], ceps=.2, use_effective_ws=True, use_effective_ti=True),
                                   superpositionModel=CumulativeWakeSum(),
                                   turbulenceModel=CrespoHernandez(c=[0.66, 0.83, 0.03, 0.32]),
                                   rotorAvgModel=GQGridRotorAvg(4,3))

# NREL 5MW data extracted from paper
ct = np.array([
[2.4967177242888408, 1.3884210526315786],
[3.0021881838074402, 1.2684210526315787],
[3.5010940919037203, 1.1652631578947366],
[3.9999999999999996, 1.0799999999999998],
[4.4989059080962805, 1.0105263157894733],
[4.99781181619256, 0.9526315789473682],
[5.496717724288842, 0.9052631578947368],
[6.002188183807442, 0.8652631578947366],
[6.501094091903721, 0.8315789473684209],
[7, 0.8031578947368418],
[7.49890590809628, 0.7789473684210524],
[7.99124726477024, 0.7726315789473682],
[8.496717724288839, 0.7726315789473682],
[9.00218818380744, 0.7715789473684208],
[9.494529540481402, 0.7621052631578944],
[10.000000000000004, 0.7463157894736839],
[10.49890590809628, 0.7305263157894736],
[10.99781181619256, 0.7178947368421049]])
cp = np.array([
[2.5016501650165015, 0.2354029062087188],
[3.0033003300330035, 0.46208718626155887],
[3.5049504950495054, 0.5476882430647292],
[4.006600660066006, 0.5772787318361956],
[4.5016501650165015, 0.5836195508586526],
[5.003300330033003, 0.5788639365918098],
[5.498349834983495, 0.5704095112285338],
[5.999999999999998, 0.5593130779392339],
[6.495049504950494, 0.548216644649934],
[7.003300330033001, 0.5365918097754294],
[7.498349834983497, 0.5260237780713343],
[7.999999999999998, 0.5228533685601058],
[8.5016501650165, 0.5223249669749009],
[8.996699669966993, 0.5217965653896963],
[9.491749174917492, 0.5175693527080582],
[9.99339933993399, 0.5096433289299869],
[10.495049504950492, 0.5017173051519155],
[10.996699669966995, 0.4948480845442537]])

# CT_curve = np.array([[2.0,  1.4612728464576872],
#                     [2.5,  1.3891500248600195],
#                     [3.0,  1.268082754962957 ],
#                     [3.5,  1.1646999475504172],
#                     [4.0,  1.0793803926905128],
#                     [4.5,  1.0098020917279509],
#                     [5.0,  0.9523253671258429],
#                     [5.5,  0.9048200632193146],
#                     [6.0,  0.8652746358037285],
#                     [6.5,  0.8317749797630494],
#                     [7.0,  0.8032514305647592],
#                     [7.5,  0.7788892341777304],
#                     [8.0,  0.7730863447173755],
#                     [8.5,  0.7726206761501038],
#                     [9.0,  0.7721934195205071],
#                     [9.5,  0.7628473779358198],
#                     [10.0, 0.7459330274762097],
#                     [10.5, 0.7310049480450205],
#                     [11.0, 0.7177914274917664],
#                     [11.5, 0.799361832581412 ],
#                     [12.0, 0.8871279360742889],
#                     [12.5, 0.9504655842078242],
#                     [13.0, 1.0000251651970853],
#                     [13.5, 1.0390424010487957],
#                     [14.0, 1.0701572223736   ],
#                     [14.5, 1.0945877239199593]])
# # SOWFA
# CP_curve = np.array([[2.0,  -0.2092219804533027],
#                     [2.5,  0.2352391893638198 ],
#                     [3.0,  0.46214453324002824],
#                     [3.5,  0.5476677311380832 ],
#                     [4.0,  0.5772456648046942],
#                     [4.5,  0.5833965967255043],
#                     [5.0,  0.5790298877294793],
#                     [5.5,  0.5701467792599509],
#                     [6.0,  0.5595564940228319],
#                     [6.5,  0.5480479331210222],
#                     [7.0,  0.5366246493538858],
#                     [7.5,  0.5258303873334416],
#                     [8.0,  0.5229191014420005],
#                     [8.5,  0.5224657416437077],
#                     [9.0,  0.5220516710065948],
#                     [9.5,  0.5175531496262384],
#                     [10.0, 0.5092952304943719],
#                     [10.5, 0.5016730194861562],
#                     [11.0, 0.4946298748497652],
#                     [11.5, 0.5326349577484786],
#                     [12.0, 0.5597671514540806],
#                     [12.5, 0.5679550280111124],
#                     [13.0, 0.5659876382489049],
#                     [13.5, 0.5572755521043566],
#                     [14.0, 0.5441595739848516],
#                     [14.5, 0.5280326705762761]])

class nrel5mw(WindTurbine):
    def __init__(self, method='linear', rho=1.225, D=126., z0=90.):
        """
        Parameters
        ----------
        method : {'linear', 'pchip'}
            linear(fast) or pchip(smooth and gradient friendly) interpolation
        """
        WindTurbine.__init__(self, name='nrel5mw', diameter=D, hub_height=z0,
                             powerCtFunction=PowerCtTabular(cp[:, 0], cp[:, 1] * 0.5 * rho * cp[:, 0]**3 * D**2 / 4. * np.pi, 'w',
                                                            ct[:, 1], method=method))